name: CI/CD
on: push
jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-
      - name: Install
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install

  build:
    name: build
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-
      - name: Install
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install
      
      - uses: actions/cache@v1
        id: assets-cache
        with:
          path: src/frontend/assets/scripts
          key: assets-${{ hashFiles('**/src/frontend/global-entry.js') }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-
      - name: bundle globals production
        if: steps.assets-cache.outputs.cache-hit != 'true'
        run: NODE_ENV=production yarn bundle:globals
      - name: bundle globals dev
        if: steps.assets-cache.outputs.cache-hit != 'true'
        run: NODE_ENV=dev yarn bundle:globals

      - name: bundle production
        run: NODE_ENV=production ONCE=true yarn bundle
      - name: bundle dev
        run: ONCE=true yarn bundle
      - name: build
        run: yarn build
      - name: types
        run: yarn types
      - name: Upload Build
        uses: actions/upload-artifact@v1
        with:
          name: lib
          path: lib
      - name: Upload Types
        uses: actions/upload-artifact@v1
        with:
          name: types
          path: types
      - name: Upload Bundle
        uses: actions/upload-artifact@v1
        with:
          name: bundle
          path: src/frontend/assets/scripts

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-
      - name: Install
        if: steps.yarn-cache.outputs.cache-hit != 'true'
      - name: Lint
        run: yarn lint
      - name: spell
        run: yarn cspell
      - name: test
        run: yarn test

  # e2e:
  #   name: Cypress
  #   needs: build
  #   services:
  #     mongo:
  #       image: mongo:3.4.23
  #       ports:
  #         - 27017:27017
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@master
  #     - name: Setup
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: '10.x'
  #     - name: Download Build
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: lib
  #     - name: Download Types
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: types
  #     - name: Download Bundle
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: bundle
  #     - name: Install
  #       if: steps.cache.outputs.cache-hit != 'true'
  #       run: yarn install
  #     - name: Cache node_modules
  #       uses: actions/cache@v1
  #       id: cache
  #       with:
  #         path: example-app/node_modules
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/example-app/package.json') }}
  #     - name: Install
  #       if: steps.cache.outputs.cache-hit != 'true'
  #       run: yarn install
  #       working-directory: 'example-app'
  #     - name: Start server in the background
  #       working-directory: 'example-app'
  #       run: yarn start &
  #     - name: run cypress
  #       working-directory: 'example-app'
  #       run: yarn cypress:run
      