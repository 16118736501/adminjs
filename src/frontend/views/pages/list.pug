extends ../layout/layout
include ../mixins/breadcrumb
include ../mixins/emptyTable

block content
  section.table-list
    +breadcrumb(currentResource)
    .column
      .level
        .title=currentResource.decorate().getResourceName()
        if total
          .field.is-grouped
            .control
              a.button.is-primary(href=h.newRecordUrl(currentResource))
                span.icon
                  i.fas.fa-plus.fa-xs
                .btn-text Add new
            //-  TODO - uncomment when custom actions will be ready
            //- .control
            //-   a.button.is-primary.is-outlined
            //-     span.icon
            //-       i.fas.fa-download.fa-xs
            //-     .btn-text Export
    if total
      .column
        .border-box
          table.table.is-fullwidth
            thead
              tr
                for prop in currentResource.decorate().getListProperties()
                  th(class= { 'main' : prop.isTitle() })
                    - isSortedByCurrentPropName = sort.sortBy === prop.name()
                    - direction = sort.direction === 'asc' && isSortedByCurrentPropName ? 'desc' : 'asc'
                    - sortable = prop.isSortable()
                    a(class={ 'is-sortable' : sortable } href=sortable && h.listUrl(currentResource, { page, sort: { sortBy: prop.name(), direction }})) 
                      .text-small(class={ 'active' : isSortedByCurrentPropName })=h._.startCase(prop.name())
                      .sorting-icons(class={ 'hidden' : !isSortedByCurrentPropName })
                        i.fas(class=`fa-caret-${sort.direction === 'asc' ? 'up' : 'down'}`)
                th
            tbody
              for record in records
                - actions = currentResource.decorate().getRecordActions(record)
                tr
                  for prop in currentResource.decorate().getListProperties()
                    td.is-vcentered(class={ 'property-main' : prop.isTitle() })
                      if actions['show'] && prop.isTitle()
                        a(href=actions['show'].path)
                          != currentResource.decorate().getValue({ record, property: prop, where: 'list'})
                      else
                        != currentResource.decorate().getValue({ record, property: prop, where: 'list'})
                  td
                    .dropdown.is-right.is-hoverable
                      .dropdown-trigger
                        .dots
                           span.icon
                            i.fas.fa-ellipsis-h
                      .dropdown-menu
                        .dropdown-content
                          for action in actions
                            a.button.is-white(href=action.path)
                              span.icon
                                i(class=action.icon)
                              .btn-text=action.label
                              
          - pages = h.paginate(total, page, perPage).pages
          if pages.length > 1
            .level-item.pagination-content
              .pagination
                - isLastPage = pages.indexOf(page) === pages.length - 1
                - isFirstPage = pages.indexOf(page) === 0
                a.button.is-white(class={ 'disabled' : isFirstPage } href=h.listUrl(currentResource, { page: page - 1, sort}))
                 i.fas.fa-angle-left.fa-lg
                for p in pages
                  a.pages.button.is-white(class={ 'active' : p === page }
                    href=h.listUrl(currentResource, { page: p, sort})
                  )= p
                a.current-page.hidden.button.is-white= page
                a.button.is-white(class={ 'disabled' : isLastPage } href=h.listUrl(currentResource, { page: page + 1, sort }))
                  i.fas.fa-angle-right.fa-lg
    else
      +emptyTable(h.newRecordUrl(currentResource))