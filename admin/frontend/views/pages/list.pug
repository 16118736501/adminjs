extends ../layout/layout
include ../mixins/breadcrumb
include ../mixins/emptyTable

block content
  section.table-list
    +breadcrumb([currentModel.decorate().getModelName()])
    .column
      .level
        .title=currentModel.decorate().getModelName()
        if total
          .field.is-grouped
            .control
              a.button.is-primary(href=h.newInstanceUrl(currentModel))
                span.icon
                  i.fas.fa-plus.fa-xs
                .btn-text Add new
            .control
              a.button.is-primary.is-outlined
                span.icon
                  i.fas.fa-download.fa-xs
                .btn-text Export
    if total
      .column
        .border-box
          table.table.is-fullwidth
            thead
              tr
                for prop in currentModel.decorate().getListProperties()
                  th.text-small=prop.name().toUpperCase()
                th
            tbody
              for instance in instances
                tr
                  for prop in currentModel.decorate().getListProperties()
                    td.is-vcentered!= currentModel.decorate().getValue({ instance, property: prop, where: 'list', helpers: h})
                  td
                    .dropdown.is-right.is-hoverable
                      .dropdown-trigger
                        .dots
                           span.icon
                            i.fas.fa-ellipsis-h
                      .dropdown-menu
                        .dropdown-content
                          a.button.is-white(href=h.showInstanceUrl(currentModel, instance))
                            span.icon.is-large
                              i.fas.fa-info
                            .btn-text Info
                          a.button.is-white(href=h.editInstanceUrl(currentModel, instance))
                            span.icon
                              i.fas.fa-pen
                            .btn-text Edit
                          a.button.is-white(href=h.deleteInstanceUrl(currentModel, instance))
                            span.icon
                              i.fas.fa-trash
                            .btn-text Remove
                      
          - pages = h.paginate(total, page, perPage).pages
          if pages.length > 1
            .level-item.pagination-content
              .pagination
                a.button.is-white
                 i.fas.fa-angle-left.fa-lg
                for p in pages
                  a.button.is-white(class={ 'active' : p == page }
                    href=h.listUrl(currentModel, { page: p })
                  )= p
                a.button.is-white
                  i.fas.fa-angle-right.fa-lg
    else
      +emptyTable(h.newInstanceUrl(currentModel))