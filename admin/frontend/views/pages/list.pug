extends ../layout/layout
include ../mixins/breadcrumb
include ../mixins/emptyTable

block content
  section.table-list
    +breadcrumb([currentResource.decorate().getResourceName()])
    .column
      .level
        .title=currentResource.decorate().getResourceName()
        if total
          .field.is-grouped
            .control
              a.button.is-primary(href=h.newRecordUrl(currentResource))
                span.icon
                  i.fas.fa-plus.fa-xs
                .btn-text Add new
            .control
              a.button.is-primary.is-outlined
                span.icon
                  i.fas.fa-download.fa-xs
                .btn-text Export
    if total
      .column
        .border-box
          table.table.is-fullwidth
            thead
              tr
                for prop in currentResource.decorate().getListProperties()
                  th(class= { 'main' : h.isMainColumn(prop.name()) })
                    - isSortedByCurrentPropName = sort.sortBy === prop.name()
                    - direction = sort.direction === 'asc' && isSortedByCurrentPropName ? 'desc' : 'asc'
                    a(href=h.listUrl(currentResource, { sort: { sortBy: prop.name(), sortDirection: direction }}))
                      .text-small(class={ 'active' : isSortedByCurrentPropName })=h._.startCase(prop.name())
                      .sorting-icons(class={ 'hidden' : !isSortedByCurrentPropName })
                        i.fas(class=`fa-caret-${sort.direction === 'asc' ? 'up' : 'down'}`)
                th
            tbody
              for record in records
                - actions = currentResource.decorate().getRecordActions(h, record)
                tr
                  for prop in currentResource.decorate().getListProperties()
                    td.is-vcentered(class={ 'property-main' : h.isMainColumn(prop.name()) })
                      if actions['show'] && h.isMainColumn(prop.name())
                        a(href=actions['show'].path)
                          != currentResource.decorate().getValue({ record, property: prop, where: 'list', helpers: h})
                      else
                        != currentResource.decorate().getValue({ record, property: prop, where: 'list', helpers: h})
                  td
                    .dropdown.is-right.is-hoverable
                      .dropdown-trigger
                        .dots
                           span.icon
                            i.fas.fa-ellipsis-h
                      .dropdown-menu
                        .dropdown-content
                          for action in actions
                            a.button.is-white(href=action.path)
                              span.icon
                                i(class=`fas fa-${action.icon}`)
                              .btn-text=action.label
                    
          - pages = h.paginate(total, page, perPage).pages
          if pages.length > 1
            .level-item.pagination-content
              .pagination
                a.button.is-white
                 i.fas.fa-angle-left.fa-lg
                for p in pages
                  a.button.is-white(class={ 'active' : p == page }
                    href=h.listUrl(currentResource, { page: p })
                  )= p
                a.button.is-white
                  i.fas.fa-angle-right.fa-lg
    else
      +emptyTable(h.newRecordUrl(currentResource))